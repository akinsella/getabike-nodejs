// Generated by CoffeeScript 1.6.3
var API_KEY, City, Station, cities, cronJob, fetchStations, fs, job, processRequest, request, stations, utils, _;

utils = require('../lib/utils');

_ = require('underscore')._;

fs = require('fs');

cronJob = require('cron').CronJob;

request = require('request');

Station = require('../model/statistic/station');

City = require('../service/city');

API_KEY = process.env["JCDECAUX_KEY"];

processRequest = function(req, res, url, transform) {
  var options;
  options = utils.buildOptions(req, res, url, 5 * 60, transform);
  return utils.processRequest(options);
};

job = new cronJob({
  cronTime: '0 */15 * * * *',
  onTick: function() {
    var city, contract;
    contract = "Paris";
    city = _.chain(City.cities()).filter(function(city) {
      return city.contract === contract;
    }).head().value();
    return fetchStations(contract, function(err, stations) {
      console.log("Fetching stations data ...");
      if (err) {
        return console.log("Got some error: " + err);
      } else {
        stations = _(stations).map(function(station) {
          return {
            station: station.number,
            contract: city.id,
            bikes: station.available_bikes,
            stands: station.bike_stands,
            freeStands: station.available_bike_stands
          };
        });
        return Station.create(stations, function(err) {
          if (err) {
            return console.log("Got some error: " + err);
          } else {
            return console.log("Stations data stored with success");
          }
        });
      }
    });
  },
  start: false,
  timeZone: "Europe/Paris"
});

job.start();

fetchStations = function(contract, callback) {
  var url;
  url = "https://api.jcdecaux.com/vls/v1/stations?contract=" + contract + "&apiKey=" + API_KEY;
  return request.get({
    url: url,
    json: true,
    headers: {
      "User-Agent": "getabike-nodejs"
    }
  }, function(err, response, data) {
    var contentType;
    contentType = utils.getContentType(response);
    console.log("[" + url + "] Http Response - Content-Type: " + contentType);
    console.log("[" + url + "] Http Response - Headers: ", response.headers);
    if (!utils.isContentTypeJsonOrScript(contentType)) {
      console.log("[" + url + "] Content-Type is not json or javascript: Not caching data and returning response directly");
      return callback(err, void 0);
    } else {
      return callback(void 0, data);
    }
  });
};

stations = function(req, res) {
  return processRequest(req, res, "https://api.jcdecaux.com/vls/v1/stations?contract=" + req.params.contract + "&apiKey=" + API_KEY, function(data) {
    return data;
  });
};

cities = function(req, res) {
  var options;
  options = {
    req: req,
    res: res
  };
  cities = City.cities();
  return utils.responseData(200, "", cities, options);
};

module.exports = {
  cities: cities,
  stations: stations
};
